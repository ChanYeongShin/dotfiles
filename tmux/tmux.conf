# vim color scheme
set -g default-terminal "xterm-256color"

# Reload configuration
bind-key r source-file ~/.tmux.conf \; display "Reloaded from ~/.tmux.conf"

# use mouse
set -g mouse on

# prefix
#set-option -g prefix C-a
#bind C-a last-window
#bind a send-prefix
set-option -g prefix2 C-Space
bind space copy-mode
bind C-space last-window

# vi-mode
setw -g mode-keys vi

# split panes
bind h split-window -bh -c "#{pane_current_path}"
bind j split-window -v -c "#{pane_current_path}"
bind k split-window -bv -c "#{pane_current_path}"
bind l split-window -h -c "#{pane_current_path}"

# navigate panes
bind -n C-h select-pane -L
bind -n C-j select-pane -D
bind -n C-k select-pane -U
bind -n C-l select-pane -R

# resize pane
bind H resize-pane -L \; switch-client -T "resize-pane"
bind J resize-pane -D \; switch-client -T "resize-pane"
bind H resize-pane -U \; switch-client -T "resize-pane"
bind L resize-pane -R \; switch-client -T "resize-pane"
bind -T "resize-pane" H resize-pane -L \; switch-client -T "resize-pane"
bind -T "resize-pane" J resize-pane -D \; switch-client -T "resize-pane"
bind -T "resize-pane" K resize-pane -U \; switch-client -T "resize-pane"
bind -T "resize-pane" L resize-pane -R \; switch-client -T "resize-pane"


# navigate windows
bind i previous-window \; switch-client -T "move-window"
bind o next-window     \; switch-client -T "move-window" 
bind -T "move-window" i previous-window \; switch-client -T "move-window" 
bind -T "move-window" o next-window \; switch-client -T "move-window" 

# move window
bind I swap-window -t - \; previous-window \; switch-client -T "swap-window"
bind O swap-window -t + \; next-window \; switch-client -T "swap-window"
bind -T "swap-window" I swap-window -t - \; previous-window \; switch-client -T "swap-window"
bind -T "swap-window" O swap-window -t + \; next-window \; switch-client -T "swap-window"




# Appearance

# pane/window numbers be 1-indexed
set-option -g base-index 1
set-option -g pane-base-index 1

# window name as working directory
set-option -g status-interval 1
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'


# Status Bar: auto-generated by tmuxline.vim
set -g status-justify "left"
set -g status "on"
set -g status-left-style "none"
set -g message-command-style "fg=colour231,bg=colour31"
set -g status-right-style "none"
set -g status-style "bg=colour234,none"
set -g message-style "fg=colour231,bg=colour31"
set -g pane-border-style "fg=colour240"
set -g status-right-length "100"
set -g status-left-length "100"

TMUX_STATUS_BG="colour$PROMPT_HOST_COLOR"





# Reference: http://man7.org/linux/man-pages/man1/tmux.1.html#FORMATS
# Reference: https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg
setw -g window-status-activity-style "none"
setw -g window-status-activity-style "fg=colour250,bg=colour234,underscore"
setw -g window-status-separator ""
setw -g window-status-style "fg=colour250,bg=colour234,none"
# [left status] session name (#S), hostname (#h)
#set -g status-left "#[fg=colour16,bg=$TMUX_STATUS_BG,bold] #S #[fg=colour234,bg=$TMUX_STATUS_BG,nobold,nounderscore,noitalics]#[fg=$TMUX_STATUS_BG,bg=colour234] #h "
set -g status-left "#[fg=colour16,bg=$TMUX_STATUS_BG,bold] #S "
# [right status] prefix, datetime, etc.
set -g status-right "#[fg=colour231,bg=colour04]#{s/^(.+)$/ \\1 :#{s/root//:client_key_table}}#[default]#[fg=colour236,bg=colour234,nobold,nounderscore,noitalics]#[fg=colour247,bg=colour236] %Y-%m-%d  %H:%M #[fg=colour252,bg=colour236,nobold,nounderscore,noitalics]"
# en

# window notifications
set-window-option -g monitor-activity on
set-option -g visual-activity off          # no 'Activity in window <n>'

# Allow the arrow key to be used immediately afterult   # inactive pane border: gray
set-option -g pane-active-border-style fg=green,bg=default  # active pane border: gre changing windows
set-option -g repeat-time 0

# More history and scrollback
set-option -g history-limit 100000

# }}}[window] number (#I), window flag (#F) such as Marked or Zoomed. If marked (i.e. #F contains 'M'), highlight it.
setw -g window-status-format "#[fg=colour31,bg=colour234] #I#F#[fg=colour250,bg=colour234] #{?#{m:*M*,#F},#[fg=colour233]#[bg=colour71],}#W#[bg=colour234] "
# [active window] similar, but use blue-ish color. If panes are synchronized, display the information.
setw -g window-status-current-format "#[fg=colour234,bg=colour31,nobold,nounderscore,noitalics]#[fg=colour87,bg=colour31] #I#F#[fg=colour231,bg=colour31,bold]#W#{?pane_synchronized,#[fg=colour190](SYNC),} #[fg=colour31,bg=colour234,nobold,nounderscore,noitalics]"

# window modes color (e.g. choosing window: <prefix>w / escape mode)
setw -g mode-style bg=colour31,fg=white



# pane border colors
set-option -g pane-border-style fg=colour240,bg=default   # inactive pane border: gray
set-option -g pane-active-border-style fg=white,bg=default  # active pane border: green

# Pane number and title shown on the border
set-option -g pane-border-status 'top'
#set-option -g pane-border-format '(#{pane_index}) #{?pane_active,#[fg=colour156],}#T#F'
set-option -g pane-border-format '(#{pane_index}) #{?pane_active,#[fg=white],}#T'

# (DISABLED) Auto hide pane-border-status line when only one pane is displayed (see tmux/tmux#566)
#set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
#set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
#set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
#set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_panes} -gt 1 ]; then tmux set pane-border-status top; fi"'

# window notifications
set-window-option -g monitor-activity on
set-option -g visual-activity off          # no 'Activity in window <n>'

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# More history and scrollback
set-option -g history-limit 100000




